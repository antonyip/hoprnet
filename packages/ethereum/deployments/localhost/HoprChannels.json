{
  "address": "0x902602174a9cEb452f60c09043BE5EBC52096200",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_secsClosure",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pubKeyFirstHalf",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pubKeySecondHalf",
          "type": "uint256"
        }
      ],
      "name": "AccountInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "AccountSecretUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partyAAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partyBAmount",
          "type": "uint256"
        }
      ],
      "name": "ChannelClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partyABalance",
          "type": "uint256"
        }
      ],
      "name": "ChannelFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "opener",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "ChannelOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closureTime",
          "type": "uint256"
        }
      ],
      "name": "ChannelPendingToClose",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUND_CHANNEL_MULTI_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUND_CHANNEL_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKENS_RECIPIENT_INTERFACE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accounts",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "channels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partyABalance",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "closureTime",
          "type": "uint32"
        },
        {
          "internalType": "uint24",
          "name": "status",
          "type": "uint24"
        },
        {
          "internalType": "bool",
          "name": "closureByPartyA",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "finalizeChannelClosure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accountB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "fundAndOpenChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fundChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accountB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "fundChannelMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "pubKeyFirstHalf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pubKeySecondHalf",
          "type": "uint256"
        }
      ],
      "name": "initializeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "initiateChannelClosure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "openChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "secretPreImage",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "proofOfRelaySecret",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "winProb",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "redeemTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secsClosure",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "updateAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea7abcbff31a7cdb923fb22b3bf819c63ec262c72f4ee99fdfdd6e0efa21f1c8",
  "receipt": {
    "to": null,
    "from": "0xB3Aa2138DE698597e2e3F84f60eF415d13731b6f",
    "contractAddress": "0x902602174a9cEb452f60c09043BE5EBC52096200",
    "transactionIndex": 0,
    "gasUsed": "2566315",
    "logsBloom": "0x
    "blockHash": "0x34ab9b29548915fd484b4a73359fea6e20ddfcfd1e17050fb963c7afbb598e42",
    "transactionHash": "0xea7abcbff31a7cdb923fb22b3bf819c63ec262c72f4ee99fdfdd6e0efa21f1c8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0xea7abcbff31a7cdb923fb22b3bf819c63ec262c72f4ee99fdfdd6e0efa21f1c8",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x000000000000000000000000902602174a9ceb452f60c09043be5ebc52096200",
          "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
          "0x000000000000000000000000902602174a9ceb452f60c09043be5ebc52096200"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x34ab9b29548915fd484b4a73359fea6e20ddfcfd1e17050fb963c7afbb598e42"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "2566315",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x66DB78F4ADD912a6Cb92b672Dfa09028ecc3085E", 60],
  "solcInputHash": "3e60fb29f59a517239c7feab733834c8",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_secsClosure\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pubKeyFirstHalf\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pubKeySecondHalf\",\"type\":\"uint256\"}],\"name\":\"AccountInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"AccountSecretUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partyAAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partyBAmount\",\"type\":\"uint256\"}],\"name\":\"ChannelClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partyABalance\",\"type\":\"uint256\"}],\"name\":\"ChannelFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"opener\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"ChannelOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closureTime\",\"type\":\"uint256\"}],\"name\":\"ChannelPendingToClose\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUND_CHANNEL_MULTI_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUND_CHANNEL_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENS_RECIPIENT_INTERFACE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyABalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"closureTime\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"status\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"closureByPartyA\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"finalizeChannelClosure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"fundAndOpenChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"fundChannelMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pubKeyFirstHalf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubKeySecondHalf\",\"type\":\"uint256\"}],\"name\":\"initializeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"initiateChannelClosure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"openChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secretPreImage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"proofOfRelaySecret\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"winProb\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"redeemTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secsClosure\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"updateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_secsClosure\":\"seconds until a channel can be closed\",\"_token\":\"HoprToken address\"}},\"finalizeChannelClosure(address)\":{\"details\":\"Finalize channel closure, if cool-off period is over it will close the channel and transfer funds to the parties involved, then emits {ChannelClosed} event.\",\"params\":{\"counterparty\":\"the address of the counterparty\"}},\"fundAndOpenChannel(address,address,uint256,uint256)\":{\"details\":\"Fund channel and then open it, then emits {ChannelFunded} and {ChannelOpened} events.\",\"params\":{\"accountA\":\"the address of accountA\",\"accountB\":\"the address of accountB\",\"amountA\":\"amount to fund accountA\",\"amountB\":\"amount to fund accountB\"}},\"fundChannel(address,address,uint256)\":{\"details\":\"Funds a channel in one direction, then emits {ChannelFunded} event.\",\"params\":{\"account\":\"the address of the recipient\",\"amount\":\"amount to fund\",\"counterparty\":\"the address of the counterparty\"}},\"fundChannelMulti(address,address,uint256,uint256)\":{\"details\":\"Funds a channel, in both directions, then emits {ChannelFunded} event.\",\"params\":{\"accountA\":\"the address of accountA\",\"accountB\":\"the address of accountB\",\"amountA\":\"amount to fund accountA\",\"amountB\":\"amount to fund accountB\"}},\"initializeAccount(bytes32,uint256,uint256)\":{\"details\":\"Initializes an account, stores it's public key, secret and counter, then emits {AccountInitialized} and {AccountSecretUpdated} events.\",\"params\":{\"pubKeyFirstHalf\":\"first half of the public key\",\"pubKeySecondHalf\":\"second half of the public key\",\"secret\":\"account's secret\"}},\"initiateChannelClosure(address)\":{\"details\":\"Initialize channel closure, updates channel's closure time, when the cool-off period is over, user may finalize closure, then emits {ChannelPendingToClose} event.\",\"params\":{\"counterparty\":\"the address of the counterparty\"}},\"openChannel(address)\":{\"details\":\"Opens a channel, then emits {ChannelOpened} event.\",\"params\":{\"counterparty\":\"the address of the counterparty\"}},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"params\":{\"amount\":\"uint256 amount of tokens to transfer\",\"from\":\"address token holder address\",\"operator\":\"address operator requesting the transfer\",\"operatorData\":\"bytes extra information provided by the operator (if any)\",\"to\":\"address recipient address\",\"userData\":\"bytes extra information provided by the token holder (if any)\"}},\"updateAccount(bytes32)\":{\"details\":\"Updates account's secret and counter, then emits {AccountSecretUpdated} event.\",\"params\":{\"secret\":\"account's secret\"}}},\"stateVariables\":{\"token\":{\"details\":\"HoprToken, the token that will be used to settle payments\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canImplementInterfaceForAddress(bytes32,address)\":{\"notice\":\"See {IERC1820Implementer-canImplementInterfaceForAddress}.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"A hook triggered when HOPR tokens are send to this contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HoprChannels/HoprChannels.sol\":\"HoprChannels\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/ERC1820Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1820Implementer.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC1820Implementer} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\\n * declare their willingness to be implementers.\\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\\n * registration to be complete.\\n */\\ncontract ERC1820Implementer is IERC1820Implementer {\\n    bytes32 constant private _ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\\\"ERC1820_ACCEPT_MAGIC\\\"));\\n\\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\\n\\n    /**\\n     * See {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) public view override returns (bytes32) {\\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\\n    }\\n\\n    /**\\n     * @dev Declares the contract as willing to be an implementer of\\n     * `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer} and\\n     * {IERC1820Registry-interfaceHash}.\\n     */\\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\\n        _supportedInterfaces[interfaceHash][account] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x035d03af9718068b8a38614275df709624c3d7bfc0b1cfd6caa549578666f55d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC1820Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820Implementer {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x924528e397be10da447cf74935877b5455567cbcdb11058f0d336597805784b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x02e3523816b92b805f99dcecf8cbada55c34ca9983a79e2a114a232f466f2f3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1e884229423b544c0b07106f59311ea7291ca25a863e9d8f8dd9debe17669cfe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/HoprChannels/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"../utils/ECDSA.sol\\\";\\n\\ncontract Accounts {\\n    /**\\n     * @dev An account struct\\n     */\\n    struct Account {\\n        bytes32 secret; // account's hashed secret\\n        uint256 counter; // increases everytime 'secret' is changed\\n    }\\n\\n    /**\\n     * @dev Stored accounts keyed by their address\\n     */\\n    mapping(address => Account) public accounts;\\n\\n    /**\\n     * @dev Initializes an account,\\n     * stores it's public key, secret and counter,\\n     * then emits {AccountInitialized} and {AccountSecretUpdated} events.\\n     * @param account the address of the account\\n     * @param pubKeyFirstHalf first half of the public key\\n     * @param pubKeySecondHalf second half of the public key\\n     * @param secret account's secret\\n     */\\n    function _initializeAccount(\\n        address account,\\n        uint256 pubKeyFirstHalf,\\n        uint256 pubKeySecondHalf,\\n        bytes32 secret\\n    ) internal {\\n        require(account != address(0), \\\"account must not be empty\\\");\\n        require(pubKeyFirstHalf != uint256(0), \\\"pubKeyFirstHalf must not be empty\\\");\\n        require(pubKeySecondHalf != uint256(0), \\\"pubKeySecondHalf must not be empty\\\");\\n        // require(secret != bytes32(0), \\\"secret must not be empty\\\");\\n\\n        require(\\n            ECDSA.pubKeyToEthereumAddress(pubKeyFirstHalf, pubKeySecondHalf) == account,\\n            \\\"public key does not match account\\\"\\n        );\\n\\n        _updateAccount(account, secret);\\n\\n        emit AccountInitialized(account, pubKeyFirstHalf, pubKeySecondHalf);\\n    }\\n\\n    /**\\n     * @dev Updates account's secret and counter,\\n     * then emits {AccountSecretUpdated} event.\\n     * @param account the address of the account\\n     * @param secret account's secret\\n     */\\n    function _updateAccount(\\n        address account,\\n        bytes32 secret\\n    ) internal {\\n        require(secret != bytes32(0), \\\"secret must not be empty\\\");\\n\\n        Account storage accountData = accounts[account];\\n        require(secret != accountData.secret, \\\"secret must not be the same as before\\\");\\n\\n        accountData.secret = secret;\\n        accountData.counter += 1;\\n\\n        emit AccountSecretUpdated(account, secret);\\n    }\\n\\n    event AccountInitialized(\\n        // @TODO: remove this and rely on `msg.sender`\\n        address indexed account,\\n        uint256 pubKeyFirstHalf,\\n        uint256 pubKeySecondHalf\\n    );\\n\\n    event AccountSecretUpdated(\\n        // @TODO: remove this and rely on `msg.sender`\\n        address indexed account,\\n        bytes32 secret\\n    );\\n}\",\"keccak256\":\"0x0decca5019430a5e6cca316bcbd52f4cc2c595e73212c183ccd089075fb2604f\",\"license\":\"GPL-3.0\"},\"contracts/HoprChannels/Channels.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/console.sol\\\";\\nimport \\\"../utils/SafeUint24.sol\\\";\\n\\ncontract Channels {\\n    using SafeMath for uint256;\\n    using SafeUint24 for uint24;\\n\\n    /**\\n     * @dev Possible channel statuses.\\n     * We find out the channel's status by\\n     * using {_getChannelStatus}.\\n     */\\n    enum ChannelStatus { CLOSED, OPEN, PENDING_TO_CLOSE }\\n\\n    /**\\n     * @dev A channel struct\\n     */\\n    struct Channel {\\n        // total tokens in deposit\\n        uint256 deposit;\\n        // tokens that are claimable by partyA\\n        uint256 partyABalance;\\n        // the time when the channel can be closed by either party\\n        // overloads at year >2105\\n        uint32 closureTime;\\n        // status of the channel\\n        // overloads at >16777215\\n        uint24 status;\\n        // channel closure was initiated by party A\\n        bool closureByPartyA;\\n    }\\n\\n    /**\\n     * @dev Seconds it takes until we can finalize channel closure once,\\n     * channel closure has been initialized.\\n     */\\n    uint32 public secsClosure;\\n\\n    /**\\n     * @dev Stored channels keyed by their channel ids\\n     */\\n    mapping(bytes32 => Channel) public channels;\\n\\n    /**\\n     * @dev Funds a channel, then emits\\n     * {ChannelFunded} event.\\n     * @param funder the address of the funder\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @param amountA amount to fund accountA\\n     * @param amountB amount to fund accountB\\n     */\\n    function _fundChannel(\\n        address funder,\\n        address accountA,\\n        address accountB,\\n        uint256 amountA,\\n        uint256 amountB\\n    ) internal {\\n        require(funder != address(0), \\\"funder must not be empty\\\");\\n        require(accountA != accountB, \\\"accountA and accountB must not be the same\\\");\\n        require(accountA != address(0), \\\"accountA must not be empty\\\");\\n        require(accountB != address(0), \\\"accountB must not be empty\\\");\\n        require(amountA > 0 || amountB > 0, \\\"amountA or amountB must be greater than 0\\\");\\n\\n        (,,, Channel storage channel) = _getChannel(accountA, accountB);\\n\\n        channel.deposit = channel.deposit.add(amountA).add(amountB);\\n        if (_isPartyA(accountA, accountB)) {\\n            channel.partyABalance = channel.partyABalance.add(amountA);\\n        }\\n\\n        emit ChannelFunded(\\n            accountA,\\n            accountB,\\n            funder,\\n            channel.deposit,\\n            channel.partyABalance\\n        );\\n    }\\n\\n    /**\\n     * @dev Opens a channel, then emits\\n     * {ChannelOpened} event.\\n     * @param opener the address of the opener\\n     * @param counterparty the address of the counterparty\\n     */\\n    function _openChannel(\\n        address opener,\\n        address counterparty\\n    ) internal {\\n        require(opener != counterparty, \\\"opener and counterparty must not be the same\\\");\\n        require(opener != address(0), \\\"opener must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n\\n        (,,, Channel storage channel) = _getChannel(opener, counterparty);\\n        require(channel.deposit > 0, \\\"channel must be funded\\\");\\n\\n        ChannelStatus channelStatus = _getChannelStatus(channel.status);\\n        require(channelStatus == ChannelStatus.CLOSED, \\\"channel must be closed in order to open\\\");\\n\\n        channel.status = channel.status.add(1);\\n\\n        emit ChannelOpened(opener, counterparty);\\n    }\\n\\n    /**\\n     * @dev Initialize channel closure, updates channel's\\n     * closure time, when the cool-off period is over,\\n     * user may finalize closure, then emits\\n     * {ChannelPendingToClose} event.\\n     * @param initiator the address of the initiator\\n     * @param counterparty the address of the counterparty\\n     */\\n    function _initiateChannelClosure(\\n        address initiator,\\n        address counterparty\\n    ) internal {\\n        require(initiator != counterparty, \\\"initiator and counterparty must not be the same\\\");\\n        require(initiator != address(0), \\\"initiator must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n\\n        (,,, Channel storage channel) = _getChannel(initiator, counterparty);\\n        ChannelStatus channelStatus = _getChannelStatus(channel.status);\\n        require(\\n            channelStatus == ChannelStatus.OPEN,\\n            \\\"channel must be open\\\"\\n        );\\n\\n        // @TODO: check with team, do we need SafeMath check here?\\n        channel.closureTime = _currentBlockTimestamp() + secsClosure;\\n        channel.status = channel.status.add(1);\\n\\n        bool isPartyA = _isPartyA(initiator, counterparty);\\n        if (isPartyA) {\\n            channel.closureByPartyA = true;\\n        }\\n\\n        emit ChannelPendingToClose(initiator, counterparty, channel.closureTime);\\n    }\\n\\n    /**\\n     * @dev Finalize channel closure, if cool-off period\\n     * is over it will close the channel and transfer funds\\n     * to the parties involved, then emits\\n     * {ChannelClosed} event.\\n     * @param token an ERC20 compatible token\\n     * @param initiator the address of the initiator\\n     * @param counterparty the address of the counterparty\\n     */\\n    function _finalizeChannelClosure(\\n        IERC20 token,\\n        address initiator,\\n        address counterparty\\n    ) internal {\\n        require(address(token) != address(0), \\\"token must not be empty\\\");\\n        require(initiator != counterparty, \\\"initiator and counterparty must not be the same\\\");\\n        require(initiator != address(0), \\\"initiator must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n\\n        (address partyA, address partyB,, Channel storage channel) = _getChannel(initiator, counterparty);\\n        ChannelStatus channelStatus = _getChannelStatus(channel.status);\\n        require(\\n            channelStatus == ChannelStatus.PENDING_TO_CLOSE,\\n            \\\"channel must be pending to close\\\"\\n        );\\n\\n        if (\\n            channel.closureByPartyA && (initiator == partyA) ||\\n            !channel.closureByPartyA && (initiator == partyB)\\n        ) {\\n            require(channel.closureTime < _currentBlockTimestamp(), \\\"closureTime must be before now\\\");\\n        }\\n\\n        uint256 partyAAmount = channel.partyABalance;\\n        uint256 partyBAmount = channel.deposit.sub(channel.partyABalance);\\n\\n        // settle balances\\n        if (partyAAmount > 0) {\\n            token.transfer(partyA, partyAAmount);\\n        }\\n        if (partyBAmount > 0) {\\n            token.transfer(partyB, partyBAmount);\\n        }\\n\\n        // The state counter indicates the recycling generation and ensures that both parties are using the correct generation.\\n        // Increase state counter so that we can re-use the same channel after it has been closed.\\n        channel.status = channel.status.add(8);\\n        delete channel.deposit; // channel.deposit = 0\\n        delete channel.partyABalance; // channel.partyABalance = 0\\n        delete channel.closureTime; // channel.closureTime = 0\\n        delete channel.closureByPartyA; // channel.closureByPartyA = false\\n\\n        emit ChannelClosed(initiator, counterparty, partyAAmount, partyBAmount);\\n    }\\n\\n    /**\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @return a tuple of partyA, partyB, channelId, channel\\n     */\\n    function _getChannel(address accountA, address accountB)\\n        internal\\n        view\\n        returns (\\n            address,\\n            address,\\n            bytes32,\\n            Channel storage\\n        )\\n    {\\n        (address partyA, address partyB) = _getParties(accountA, accountB);\\n        bytes32 channelId = _getChannelId(partyA, partyB);\\n        Channel storage channel = channels[channelId];\\n\\n        return (partyA, partyB, channelId, channel);\\n    }\\n\\n    /**\\n     * @param partyA the address of partyA\\n     * @param partyB the address of partyB\\n     * @return the channel id by hashing partyA and partyB\\n     */\\n    function _getChannelId(address partyA, address partyB) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(partyA, partyB));\\n    }\\n\\n    /**\\n     * @param status channel's status\\n     * @return the channel's status in 'ChannelStatus'\\n     */\\n    function _getChannelStatus(uint24 status) internal pure returns (ChannelStatus) {\\n        return ChannelStatus(status.mod(10));\\n    }\\n\\n    /**\\n     * @param status channel's status\\n     * @return the channel's iteration\\n     */\\n    function _getChannelIteration(uint24 status) internal pure returns (uint256) {\\n        return status.div(10).add(1);\\n    }\\n\\n    /**\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @return true if accountA is partyA\\n     */\\n    function _isPartyA(address accountA, address accountB) internal pure returns (bool) {\\n        return uint160(accountA) < uint160(accountB);\\n    }\\n\\n    /**\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @return a tuple representing partyA and partyB\\n     */\\n    function _getParties(address accountA, address accountB) internal pure returns (address, address) {\\n        if (_isPartyA(accountA, accountB)) {\\n            return (accountA, accountB);\\n        } else {\\n            return (accountB, accountA);\\n        }\\n    }\\n\\n    /**\\n     * @return the current timestamp\\n     */\\n    function _currentBlockTimestamp() internal view returns (uint32) {\\n        // solhint-disable-next-line\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    event ChannelFunded(\\n        address indexed accountA,\\n        address indexed accountB,\\n        // @TODO: remove this and rely on `msg.sender`\\n        address funder,\\n        uint256 deposit,\\n        uint256 partyABalance\\n    );\\n\\n    event ChannelOpened(\\n        // @TODO: remove this and rely on `msg.sender`\\n        address indexed opener,\\n        address indexed counterparty\\n    );\\n\\n    event ChannelPendingToClose(\\n        // @TODO: remove this and rely on `msg.sender`\\n        address indexed initiator,\\n        address indexed counterparty,\\n        uint256 closureTime\\n    );\\n\\n    event ChannelClosed(\\n        // @TODO: remove this and rely on `msg.sender`\\n        address indexed initiator,\\n        address indexed counterparty,\\n        uint256 partyAAmount,\\n        uint256 partyBAmount\\n    );\\n}\",\"keccak256\":\"0x278f560f0ae2b4e0a56b28e0bde80ccf52e0241881af3aa9afaa590304de83f6\",\"license\":\"GPL-3.0\"},\"contracts/HoprChannels/HoprChannels.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC1820Implementer.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./Accounts.sol\\\";\\nimport \\\"./Channels.sol\\\";\\nimport \\\"./Tickets.sol\\\";\\n\\ncontract HoprChannels is IERC777Recipient, ERC1820Implementer, Accounts, Channels, Tickets {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // required by ERC1820 spec\\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n    // required by ERC777 spec\\n    bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n    // used by {tokensReceived} to distinguish which function to call after tokens are sent\\n    uint256 public FUND_CHANNEL_SIZE = abi.encode(false, address(0), address(0)).length;\\n    // used by {tokensReceived} to distinguish which function to call after tokens are sent\\n    uint256 public FUND_CHANNEL_MULTI_SIZE = abi.encode(false, address(0), address(0), uint256(0), uint256(0)).length;\\n\\n    /**\\n     * @dev HoprToken, the token that will be used to settle payments\\n     */\\n    IERC20 public token;\\n\\n    /**\\n     * @param _token HoprToken address\\n     * @param _secsClosure seconds until a channel can be closed\\n     */\\n    constructor(address _token, uint32 _secsClosure) {\\n        token = IERC20(_token);\\n        secsClosure = _secsClosure;\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\n    }\\n\\n    /**\\n     * @dev Initializes an account,\\n     * stores it's public key, secret and counter,\\n     * then emits {AccountInitialized} and {AccountSecretUpdated} events.\\n     * @param secret account's secret\\n     * @param pubKeyFirstHalf first half of the public key\\n     * @param pubKeySecondHalf second half of the public key\\n     */\\n    function initializeAccount(\\n        bytes32 secret,\\n        uint256 pubKeyFirstHalf,\\n        uint256 pubKeySecondHalf\\n    ) external {\\n        _initializeAccount(\\n            msg.sender,\\n            pubKeyFirstHalf,\\n            pubKeySecondHalf,\\n            secret\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates account's secret and counter,\\n     * then emits {AccountSecretUpdated} event.\\n     * @param secret account's secret\\n     */\\n    function updateAccount(\\n        bytes32 secret\\n    ) external {\\n        _updateAccount(msg.sender, secret);\\n    }\\n\\n    /**\\n     * @dev Funds a channel in one direction,\\n     * then emits {ChannelFunded} event.\\n     * @param account the address of the recipient\\n     * @param counterparty the address of the counterparty\\n     * @param amount amount to fund\\n     */\\n    function fundChannel(\\n        address account,\\n        address counterparty,\\n        uint256 amount\\n    ) external {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        _fundChannel(\\n            msg.sender,\\n            account,\\n            counterparty,\\n            amount,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev Funds a channel, in both directions,\\n     * then emits {ChannelFunded} event.\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @param amountA amount to fund accountA\\n     * @param amountB amount to fund accountB\\n     */\\n    function fundChannelMulti(\\n        address accountA,\\n        address accountB,\\n        uint256 amountA,\\n        uint256 amountB\\n    ) external {\\n        token.safeTransferFrom(msg.sender, address(this), amountA.add(amountB));\\n\\n        _fundChannel(\\n            msg.sender,\\n            accountA,\\n            accountB,\\n            amountA,\\n            amountB\\n        );\\n    }\\n\\n    /**\\n     * @dev Opens a channel, then emits\\n     * {ChannelOpened} event.\\n     * @param counterparty the address of the counterparty\\n     */\\n    function openChannel(address counterparty) external {\\n        _openChannel(msg.sender, counterparty);\\n    }\\n\\n    /**\\n     * @dev Fund channel and then open it, then emits\\n     * {ChannelFunded} and {ChannelOpened} events.\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @param amountA amount to fund accountA\\n     * @param amountB amount to fund accountB\\n     */\\n    function fundAndOpenChannel(\\n        address accountA,\\n        address accountB,\\n        uint256 amountA,\\n        uint256 amountB\\n    ) external {\\n        address opener = msg.sender;\\n        require(\\n            opener == accountA || opener == accountB,\\n            \\\"opener must be accountA or accountB\\\"\\n        );\\n\\n        token.safeTransferFrom(msg.sender, address(this), amountA.add(amountB));\\n\\n        address counterparty;\\n        if (opener == accountA) {\\n            counterparty = accountB;\\n        } else {\\n            counterparty = accountA;\\n        }\\n\\n        _fundChannel(opener, accountA, accountB, amountA, amountB);\\n        _openChannel(opener, counterparty);\\n    }\\n\\n    function redeemTicket(\\n        address counterparty,\\n        bytes32 secretPreImage,\\n        bytes32 proofOfRelaySecret,\\n        uint256 amount,\\n        bytes32 winProb,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external {\\n        _redeemTicket(\\n            msg.sender,\\n            counterparty,\\n            secretPreImage,\\n            proofOfRelaySecret,\\n            amount,\\n            winProb,\\n            r,\\n            s,\\n            v\\n        );\\n    }\\n\\n    /**\\n     * @dev Initialize channel closure, updates channel's\\n     * closure time, when the cool-off period is over,\\n     * user may finalize closure, then emits\\n     * {ChannelPendingToClose} event.\\n     * @param counterparty the address of the counterparty\\n     */\\n    function initiateChannelClosure(\\n        address counterparty\\n    ) external {\\n        _initiateChannelClosure(msg.sender, counterparty);\\n    }\\n\\n    /**\\n     * @dev Finalize channel closure, if cool-off period\\n     * is over it will close the channel and transfer funds\\n     * to the parties involved, then emits\\n     * {ChannelClosed} event.\\n     * @param counterparty the address of the counterparty\\n     */\\n    function finalizeChannelClosure(\\n        address counterparty\\n    ) external {\\n        _finalizeChannelClosure(\\n            token,\\n            msg.sender,\\n            counterparty\\n        );\\n    }\\n\\n    // @TODO: check with team, is this function too complex?\\n    /**\\n     * A hook triggered when HOPR tokens are send to this contract.\\n     *\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        // solhint-disable-next-line no-unused-vars\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata operatorData\\n    ) external override {\\n        require(msg.sender == address(token), \\\"caller must be HoprToken\\\");\\n\\n        if (\\n            operator == address(this) || // must not be triggered by HoprChannels\\n            from == address(0) // ignore 'mint'\\n        ) {\\n            return;\\n        }\\n\\n        // must be one of our supported functions\\n        require(\\n            userData.length == FUND_CHANNEL_SIZE ||\\n            userData.length == FUND_CHANNEL_MULTI_SIZE,\\n            \\\"userData must match one of our supported functions\\\"\\n        );\\n\\n        bool shouldOpen;\\n        address accountA;\\n        address accountB;\\n        uint256 amountA;\\n        uint256 amountB;\\n\\n        if (userData.length == FUND_CHANNEL_SIZE) {\\n            (shouldOpen, accountA, accountB) = abi.decode(userData, (bool, address, address));\\n            amountA = amount;\\n        } else {\\n            (shouldOpen, accountA, accountB, amountA, amountB) = abi.decode(userData, (bool, address, address, uint256, uint256));\\n            require(amount == amountA.add(amountB), \\\"amount sent must be equal to amount specified\\\");\\n        }\\n\\n        _fundChannel(from, accountA, accountB, amountA, amountB);\\n\\n        if (shouldOpen) {\\n            require(from == accountA || from == accountB, \\\"funder must be either accountA or accountB\\\");\\n            _openChannel(accountA, accountB);\\n        }\\n    }\\n}\",\"keccak256\":\"0xf7fdc698dd98fdc640c90de00953774f7a784b38f3286d1c772068299e6d1914\",\"license\":\"GPL-3.0\"},\"contracts/HoprChannels/Tickets.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Accounts.sol\\\";\\nimport \\\"./Channels.sol\\\";\\nimport \\\"../utils/ECDSA.sol\\\";\\n\\ncontract Tickets is Accounts, Channels {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Stored hashes of tickets keyed by their challenge,\\n     * true if ticket has been redeemed.\\n     */\\n    mapping(bytes32 => bool) public tickets;\\n\\n    /**\\n     * @dev Redeem a ticket\\n     * @param recipient the recipient address\\n     * @param counterparty the counterparty address\\n     * @param secretPreImage the secretPreImage that results to the recipients account secret\\n     * @param proofOfRelaySecret the proof of relay secret\\n     * @param winProb the winning probability of the ticket\\n     * @param amount the amount in the ticket\\n     * @param r part of the signature\\n     * @param s part of the signature\\n     * @param v part of the signature\\n     */\\n    function _redeemTicket(\\n        address recipient,\\n        address counterparty,\\n        bytes32 secretPreImage,\\n        bytes32 proofOfRelaySecret,\\n        uint256 amount,\\n        bytes32 winProb,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal {\\n        require(recipient != address(0), \\\"recipient must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n        require(secretPreImage != bytes32(0), \\\"secretPreImage must not be empty\\\");\\n        require(proofOfRelaySecret != bytes32(0), \\\"proofOfRelaySecret must not be empty\\\");\\n        require(amount != uint256(0), \\\"amount must not be empty\\\");\\n        // require(winProb != bytes32(0), \\\"winProb must not be empty\\\");\\n        require(r != bytes32(0), \\\"r must not be empty\\\");\\n        require(s != bytes32(0), \\\"s must not be empty\\\");\\n        require(v != uint8(0), \\\"v must not be empty\\\");\\n\\n        Account storage account = accounts[recipient];\\n        require(\\n            account.secret == keccak256(abi.encodePacked(secretPreImage)),\\n            // @TODO: add salt\\n            // accounts[msg.sender].hashedSecret == bytes27(keccak256(abi.encodePacked(\\\"HOPRnet\\\", msg.sender, bytes27(preImage)))),\\n            \\\"secretPreImage must be the hash of recipient's secret\\\"\\n        );\\n\\n        (,,, Channel storage channel) = _getChannel(\\n            recipient,\\n            counterparty\\n        );\\n        require(\\n            _getChannelStatus(channel.status) != ChannelStatus.CLOSED,\\n            \\\"channel must be open or pending to close\\\"\\n        );\\n\\n        bytes32 ticketHash = _getTicketHash(\\n            _getEncodedTicket(\\n                recipient,\\n                account.counter,\\n                proofOfRelaySecret,\\n                _getChannelIteration(channel.status),\\n                amount,\\n                winProb\\n            )\\n        );\\n        require(!tickets[ticketHash], \\\"ticket must not be used twice\\\");\\n        require(ECDSA.recover(ticketHash, r, s, v) == counterparty, \\\"signer must match the counterparty\\\");\\n        require(\\n            uint256(_getTicketLuck(\\n                ticketHash,\\n                secretPreImage,\\n                proofOfRelaySecret,\\n                winProb\\n            )) <= uint256(winProb),\\n            \\\"ticket must be a win\\\"\\n        );\\n\\n        account.secret = secretPreImage;\\n        tickets[ticketHash] = true;\\n\\n        if (_isPartyA(recipient, counterparty)) {\\n            channel.partyABalance = channel.partyABalance.add(amount);\\n        } else {\\n            channel.partyABalance = channel.partyABalance.sub(amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Encode ticket data\\n     * @return bytes\\n     */\\n    function _getEncodedTicket(\\n        address recipient,\\n        uint256 recipientCounter,\\n        bytes32 proofOfRelaySecret,\\n        uint256 channelIteration,\\n        uint256 amount,\\n        bytes32 winProb\\n    ) internal pure returns (bytes memory) {\\n        bytes32 challenge = keccak256(abi.encodePacked(proofOfRelaySecret));\\n\\n        return abi.encodePacked(\\n            recipient,\\n            challenge,\\n            recipientCounter,\\n            amount,\\n            winProb,\\n            channelIteration\\n        );\\n    }\\n\\n    /**\\n     * @dev Prefix the ticket message and return\\n     * the actual hash that was used to sign\\n     * the ticket with.\\n     * @return prefixed ticket hash\\n     */\\n    function _getTicketHash(\\n        bytes memory packedTicket\\n    ) internal pure returns (bytes32) {\\n        return ECDSA.toEthSignedMessageHash(\\n            \\\"187\\\",\\n            packedTicket\\n        );\\n    }\\n\\n    /**\\n     * @dev Get the ticket's \\\"luck\\\" by\\n     * hashing provided values.\\n     * @return luck\\n     */\\n    function _getTicketLuck(\\n        bytes32 ticketHash,\\n        bytes32 secretPreImage,\\n        bytes32 proofOfRelaySecret,\\n        bytes32 winProb\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(ticketHash, secretPreImage, proofOfRelaySecret, winProb));\\n    }\\n}\",\"keccak256\":\"0x71e29d6656589ad2e3edfea3ec7b1ac5aaf036293040e3611d18384dc0fa9b51\",\"license\":\"GPL-3.0\"},\"contracts/utils/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n */\\nlibrary ECDSA {\\n    // y^2 = x^3 + 7 mod p, where p is FIELD_ORDER\\n    uint256 constant FIELD_ORDER = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;\\n    uint256 constant CURVE_ORDER = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141;\\n    uint256 constant HALF_CURVE_ORDER = (CURVE_ORDER - 1) / 2;\\n\\n    /**\\n     * @dev Computes the Ethereum address from a public key given as an\\n     * uncompressed EC-point.\\n     */\\n    function pubKeyToEthereumAddress(uint256 x, uint256 y) internal pure returns (address) {\\n        require(validate(x, y), \\\"Point must be on the curve.\\\");\\n        return address(bytes20(bytes32(keccak256(abi.encodePacked(x, y)) << 96)));\\n    }\\n\\n    /**\\n     * @dev @TODO: update\\n     */\\n    function validate(uint256 x, uint256 y) internal pure returns (bool) {\\n        uint256 rightHandSide = addmod(7, mulmod(mulmod(x, x, FIELD_ORDER), x, FIELD_ORDER), FIELD_ORDER);\\n        uint256 leftHandSide = mulmod(y, y, FIELD_ORDER);\\n\\n        return leftHandSide == rightHandSide;\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > HALF_CURVE_ORDER) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum and HOPRnet Signed Message.\\n     * Replicates the behavior of the https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method but also includes \\\"HOPRnet\\\" in the message.\\n     */\\n    function toEthSignedMessageHash(string memory length, bytes memory message) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", length, \\\"HOPRnet\\\", message));\\n    }\\n}\\n\",\"keccak256\":\"0x246064caa584e5744d10bc0538d48cef1f7a04a94e88b42dbc6a1f2c25af7a08\",\"license\":\"GPL-3.0\"},\"contracts/utils/SafeUint24.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * This is a modified version of OZ's SafeMath but aimed for uint24.\\n */\\nlibrary SafeUint24 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint24 a, uint24 b) internal pure returns (uint24) {\\n        uint24 c = a + b;\\n        require(c >= a, \\\"SafeUint24: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b > 0, \\\"SafeUint24: division by zero\\\");\\n        uint24 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b != 0, \\\"SafeUint24: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0xae01f0184edcf004490231b23b27b1798bbafb5dad38dca90782350d82d946e6\",\"license\":\"GPL-3.0\"},\"contracts/utils/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// copied from https://github.com/nomiclabs/hardhat\\n// @TODO: use library (currently blocked by hoisting)\\npragma solidity >= 0.4.22 <0.8.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x20c980c69a625b4741381c46b6034fedae34c4bb688c73184c026d406183d3f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600060a081815260c082905260e0829052606060808190526005556101208290526101408290526101608290526101808290526101a0919091526101008190526101c060405260065534801561005457600080fd5b50604051612cc0380380612cc08339818101604052604081101561007757600080fd5b508051602090910151600780546001600160a01b0319166001600160a01b0384161790556002805463ffffffff191663ffffffff8316179055604080516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b602483015260448201529051731820a4b7618bde71dce8cdc73aab6c95905fad24916329965a1d91606480830192600092919082900301818387803b15801561012f57600080fd5b505af1158015610143573d6000803e3d6000fd5b505050505050612b68806101586000396000f3fe608060405234801561001057600080fd5b50600436106101205760003560e01c80635e5c06e2116100ad578063ada8ee0d11610071578063ada8ee0d1461044f578063b4037e8014610457578063c8cb8df51461047d578063df0dd0d5146104d1578063fc0c546a1461050257610120565b80635e5c06e21461035b5780636c49a38e1461039a57806372581cc0146103d65780637a7ebd7b146103de5780637c2101ca1461043257610120565b8063249cb3fa116100f4578063249cb3fa14610283578063275621d1146102af5780632abb5e9d146102d05780633da79ce8146102f65780634341abdd1461031f57610120565b806223de2914610125578063048a097d1461020d578063075e389f1461022757806311428ad41461024d575b600080fd5b61020b600480360360c081101561013b57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b81111561017d57600080fd5b82018360208201111561018f57600080fd5b803590602001918460018302840111600160201b831117156101b057600080fd5b919390929091602081019035600160201b8111156101cd57600080fd5b8201836020820111156101df57600080fd5b803590602001918460018302840111600160201b8311171561020057600080fd5b509092509050610526565b005b610215610764565b60408051918252519081900360200190f35b61020b6004803603602081101561023d57600080fd5b50356001600160a01b031661076a565b61020b6004803603606081101561026357600080fd5b506001600160a01b03813581169160208101359091169060400135610784565b6102156004803603604081101561029957600080fd5b50803590602001356001600160a01b03166107af565b6102b7610824565b6040805163ffffffff9092168252519081900360200190f35b61020b600480360360208110156102e657600080fd5b50356001600160a01b0316610830565b61020b6004803603606081101561030c57600080fd5b508035906020810135906040013561083a565b61020b6004803603608081101561033557600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610846565b6103816004803603602081101561037157600080fd5b50356001600160a01b031661087c565b6040805192835260208301919091528051918290030190f35b61020b600480360360808110156103b057600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610895565b61021561094d565b6103fb600480360360208110156103f457600080fd5b5035610971565b60408051958652602086019490945263ffffffff9092168484015262ffffff16606084015215156080830152519081900360a00190f35b61020b6004803603602081101561044857600080fd5b50356109b1565b6102156109bb565b61020b6004803603602081101561046d57600080fd5b50356001600160a01b03166109c1565b61020b600480360361010081101561049457600080fd5b5080356001600160a01b03169060208101359060408101359060608101359060808101359060a08101359060c08101359060e0013560ff166109cb565b6104ee600480360360208110156104e757600080fd5b50356109dc565b604080519115158252519081900360200190f35b61050a6109f1565b604080516001600160a01b039092168252519081900360200190f35b6007546001600160a01b03163314610585576040805162461bcd60e51b815260206004820152601860248201527f63616c6c6572206d75737420626520486f7072546f6b656e0000000000000000604482015290519081900360640190fd5b6001600160a01b0388163014806105a357506001600160a01b038716155b156105ad5761075a565b6005548314806105be575060065483145b6105f95760405162461bcd60e51b815260040180806020018281038252603281526020018061293b6032913960400191505060405180910390fd5b6000806000806000600554898990501415610647578888606081101561061e57600080fd5b508035151595506001600160a01b036020820135811695506040909101351692508991506106cb565b888860a081101561065757600080fd5b508035151595506001600160a01b0360208201358116955060408201351693506060810135925060800135905061068e8282610a00565b8a146106cb5760405162461bcd60e51b815260040180806020018281038252602d815260200180612870602d913960400191505060405180910390fd5b6106d88c85858585610a5a565b841561075457836001600160a01b03168c6001600160a01b0316148061070f5750826001600160a01b03168c6001600160a01b0316145b61074a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806127fc602a913960400191505060405180910390fd5b6107548484610cb8565b50505050505b5050505050505050565b60065481565b600754610781906001600160a01b03163383610efb565b50565b60075461079c906001600160a01b0316333084611385565b6107aa338484846000610a5a565b505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166107de57600061081d565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b9392505050565b60025463ffffffff1681565b6107813382610cb8565b6107aa338383866113df565b61086933306108558585610a00565b6007546001600160a01b0316929190611385565b6108763385858585610a5a565b50505050565b6001602081905260009182526040909120805491015482565b336001600160a01b0385168114806108be5750836001600160a01b0316816001600160a01b0316145b6108f95760405162461bcd60e51b8152600401808060200182810382526023815260200180612a8c6023913960400191505060405180910390fd5b61090833306108558686610a00565b6000856001600160a01b0316826001600160a01b0316141561092b57508361092e565b50845b61093b8287878787610a5a565b6109458282610cb8565b505050505050565b7fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b81565b60036020526000908152604090208054600182015460029092015490919063ffffffff811690600160201b810462ffffff1690600160381b900460ff1685565b610781338261155e565b60055481565b610781338261165b565b61075a3389898989898989896118c7565b60046020526000908152604090205460ff1681565b6007546001600160a01b031681565b60008282018381101561081d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038516610ab5576040805162461bcd60e51b815260206004820152601860248201527f66756e646572206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b03161415610b065760405162461bcd60e51b815260040180806020018281038252602a8152602001806127d2602a913960400191505060405180910390fd5b6001600160a01b038416610b61576040805162461bcd60e51b815260206004820152601a60248201527f6163636f756e7441206d757374206e6f7420626520656d707479000000000000604482015290519081900360640190fd5b6001600160a01b038316610bbc576040805162461bcd60e51b815260206004820152601a60248201527f6163636f756e7442206d757374206e6f7420626520656d707479000000000000604482015290519081900360640190fd5b6000821180610bcb5750600081115b610c065760405162461bcd60e51b8152600401808060200182810382526029815260200180612b0a6029913960400191505060405180910390fd5b6000610c128585611dd4565b8054909450610c309350859250610c2a915086610a00565b90610a00565b8155610c3c8585611e16565b15610c56576001810154610c509084610a00565b60018201555b80546001820154604080516001600160a01b038a8116825260208201949094528082019290925251828716928816917f074d4367955152e97ae53474f3e30b8042462b3dd1169333c66a590386671fba919081900360600190a3505050505050565b806001600160a01b0316826001600160a01b03161415610d095760405162461bcd60e51b815260040180806020018281038252602c815260200180612ade602c913960400191505060405180910390fd5b6001600160a01b038216610d64576040805162461bcd60e51b815260206004820152601860248201527f6f70656e6572206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b6001600160a01b038116610dad576040805162461bcd60e51b815260206004820152601e602482015260008051602061296d833981519152604482015290519081900360640190fd5b6000610db98383611dd4565b93505050506000816000015411610e10576040805162461bcd60e51b815260206004820152601660248201527518da185b9b995b081b5d5cdd08189948199d5b99195960521b604482015290519081900360640190fd5b6002810154600090610e2d90600160201b900462ffffff16611e27565b90506000816002811115610e3d57fe5b14610e795760405162461bcd60e51b815260040180806020018281038252602781526020018061298d6027913960400191505060405180910390fd5b6002820154610e9590600160201b900462ffffff166001611e4f565b8260020160046101000a81548162ffffff021916908362ffffff160217905550826001600160a01b0316846001600160a01b03167fdd90f938230335e59dc925c57ecb0e27a28c2d87356e31f00cd5554abd6c1b2d60405160405180910390a350505050565b6001600160a01b038316610f56576040805162461bcd60e51b815260206004820152601760248201527f746f6b656e206d757374206e6f7420626520656d707479000000000000000000604482015290519081900360640190fd5b806001600160a01b0316826001600160a01b03161415610fa75760405162461bcd60e51b815260040180806020018281038252602f815260200180612aaf602f913960400191505060405180910390fd5b6001600160a01b038216611002576040805162461bcd60e51b815260206004820152601b60248201527f696e69746961746f72206d757374206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b6001600160a01b03811661104b576040805162461bcd60e51b815260206004820152601e602482015260008051602061296d833981519152604482015290519081900360640190fd5b600080600061105a8585611dd4565b93505092509250600061107f8260020160049054906101000a900462ffffff16611e27565b9050600281600281111561108f57fe5b146110e1576040805162461bcd60e51b815260206004820181905260248201527f6368616e6e656c206d7573742062652070656e64696e6720746f20636c6f7365604482015290519081900360640190fd5b6002820154600160381b900460ff16801561110d5750836001600160a01b0316866001600160a01b0316145b8061114057506002820154600160381b900460ff161580156111405750826001600160a01b0316866001600160a01b0316145b156111ae5761114d611eb1565b600283015463ffffffff9182169116106111ae576040805162461bcd60e51b815260206004820152601e60248201527f636c6f7375726554696d65206d757374206265206265666f7265206e6f770000604482015290519081900360640190fd5b600182015482546000906111c29083611ebb565b9050811561124e57886001600160a01b031663a9059cbb87846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561122157600080fd5b505af1158015611235573d6000803e3d6000fd5b505050506040513d602081101561124b57600080fd5b50505b80156112d857886001600160a01b031663a9059cbb86836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156112ab57600080fd5b505af11580156112bf573d6000803e3d6000fd5b505050506040513d60208110156112d557600080fd5b50505b60028401546112f490600160201b900462ffffff166008611e4f565b6002850180546000808855600188015567ff000000ffffffff1962ffffff93909316600160201b0266ffffff000000001990911617919091169055604080518381526020810183905281516001600160a01b03808b1693908c16927f8e096653b2e51f16fbc2f7c554ace94c1938ee5da0815dbcce55d3d03e319260929081900390910190a3505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610876908590611efd565b6001600160a01b03841661143a576040805162461bcd60e51b815260206004820152601960248201527f6163636f756e74206d757374206e6f7420626520656d70747900000000000000604482015290519081900360640190fd5b826114765760405162461bcd60e51b8152600401808060200182810382526021815260200180612a416021913960400191505060405180910390fd5b816114b25760405162461bcd60e51b815260040180806020018281038252602281526020018061284e6022913960400191505060405180910390fd5b836001600160a01b03166114c68484611fae565b6001600160a01b03161461150b5760405162461bcd60e51b815260040180806020018281038252602181526020018061289d6021913960400191505060405180910390fd5b611515848261155e565b604080518481526020810184905281516001600160a01b038716927f2b22861a1ef88f6a07c435dd5b2979a60ebb1c487b1f2e5498d78c07dcd787ef928290030190a250505050565b806115b0576040805162461bcd60e51b815260206004820152601860248201527f736563726574206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600090815260016020526040902080548214156116085760405162461bcd60e51b8152600401808060200182810382526025815260200180612a1c6025913960400191505060405180910390fd5b8181556001808201805490910190556040805183815290516001600160a01b038516917fde6c2e081309e5fa1ad76048c881e5c55a38b51661915a26b58ce40065fc66af919081900360200190a2505050565b806001600160a01b0316826001600160a01b031614156116ac5760405162461bcd60e51b815260040180806020018281038252602f815260200180612aaf602f913960400191505060405180910390fd5b6001600160a01b038216611707576040805162461bcd60e51b815260206004820152601b60248201527f696e69746961746f72206d757374206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b6001600160a01b038116611750576040805162461bcd60e51b815260206004820152601e602482015260008051602061296d833981519152604482015290519081900360640190fd5b600061175c8383611dd4565b9350505050600061177f8260020160049054906101000a900462ffffff16611e27565b9050600181600281111561178f57fe5b146117d8576040805162461bcd60e51b815260206004820152601460248201527331b430b73732b61036bab9ba1031329037b832b760611b604482015290519081900360640190fd5b60025463ffffffff166117e9611eb1565b60028401805463ffffffff19169190920163ffffffff908116919091179182905561182491600160201b900462ffffff1690600190611e4f16565b8260020160046101000a81548162ffffff021916908362ffffff16021790555060006118508585611e16565b905080156118725760028301805467ff000000000000001916600160381b1790555b60028301546040805163ffffffff9092168252516001600160a01b0380871692908816917fd69791bd3750bf9f659220208e4228b8170380f08ffbfc5b88b37c1d594bf9449181900360200190a35050505050565b6001600160a01b038916611922576040805162461bcd60e51b815260206004820152601b60248201527f726563697069656e74206d757374206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b6001600160a01b03881661196b576040805162461bcd60e51b815260206004820152601e602482015260008051602061296d833981519152604482015290519081900360640190fd5b866119bd576040805162461bcd60e51b815260206004820181905260248201527f736563726574507265496d616765206d757374206e6f7420626520656d707479604482015290519081900360640190fd5b856119f95760405162461bcd60e51b81526004018080602001828103825260248152602001806129f86024913960400191505060405180910390fd5b84611a4b576040805162461bcd60e51b815260206004820152601860248201527f616d6f756e74206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b82611a93576040805162461bcd60e51b815260206004820152601360248201527272206d757374206e6f7420626520656d70747960681b604482015290519081900360640190fd5b81611adb576040805162461bcd60e51b815260206004820152601360248201527273206d757374206e6f7420626520656d70747960681b604482015290519081900360640190fd5b60ff8116611b26576040805162461bcd60e51b815260206004820152601360248201527276206d757374206e6f7420626520656d70747960681b604482015290519081900360640190fd5b6001600160a01b03891660009081526001602090815260409182902082518083018b905283518082038401815290840190935282519290910191909120815414611ba15760405162461bcd60e51b81526004018080602001828103825260358152602001806129066035913960400191505060405180910390fd5b6000611bad8b8b611dd4565b935060009250611bbb915050565b6002820154611bd590600160201b900462ffffff16611e27565b6002811115611be057fe5b1415611c1d5760405162461bcd60e51b81526004018080602001828103825260288152602001806128266028913960400191505060405180910390fd5b6000611c54611c4f8d85600101548c611c488760020160049054906101000a900462ffffff16612041565b8d8d61206e565b6120e6565b60008181526004602052604090205490915060ff1615611cbb576040805162461bcd60e51b815260206004820152601d60248201527f7469636b6574206d757374206e6f742062652075736564207477696365000000604482015290519081900360640190fd5b8a6001600160a01b0316611cd18288888861210d565b6001600160a01b031614611d165760405162461bcd60e51b81526004018080602001828103825260228152602001806129d66022913960400191505060405180910390fd5b86611d23828c8c8461228f565b1115611d6d576040805162461bcd60e51b81526020600482015260146024820152733a34b1b5b2ba1036bab9ba1031329030903bb4b760611b604482015290519081900360640190fd5b8983556000818152600460205260409020805460ff19166001179055611d938c8c611e16565b15611db1576001820154611da79089610a00565b6001830155611dc6565b6001820154611dc09089611ebb565b60018301555b505050505050505050505050565b600080600080600080611de788886122cd565b915091506000611df783836122f6565b6000818152600360205260409020939a92995097509195509350505050565b6001600160a01b0390811691161090565b6000611e3962ffffff8316600a61233d565b62ffffff166002811115611e4957fe5b92915050565b600082820162ffffff808516908216101561081d576040805162461bcd60e51b815260206004820152601d60248201527f5361666555696e7432343a206164646974696f6e206f766572666c6f77000000604482015290519081900360640190fd5b63ffffffff421690565b600061081d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506123b1565b6060611f52826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124489092919063ffffffff16565b8051909150156107aa57808060200190516020811015611f7157600080fd5b50516107aa5760405162461bcd60e51b815260040180806020018281038252602a815260200180612a62602a913960400191505060405180910390fd5b6000611fba838361245f565b61200b576040805162461bcd60e51b815260206004820152601b60248201527f506f696e74206d757374206265206f6e207468652063757276652e0000000000604482015290519081900360640190fd5b5060408051602080820194909452808201929092528051808303820181526060909201905280519101206001600160a01b031690565b6000612063600161205862ffffff8516600a612493565b62ffffff1690611e4f565b62ffffff1692915050565b6040805160208082019690965281518082038701815281830183528051960195909520606097881b6bffffffffffffffffffffffff1916978601979097526074850196909652609484019490945260b483015260d482019290925260f480820192909252825180820390920182526101140190915290565b6000611e496040518060400160405280600381526020016231383760e81b8152508361250c565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561216e5760405162461bcd60e51b81526004018080602001828103825260228152602001806128be6022913960400191505060405180910390fd5b8160ff16601b1415801561218657508160ff16601c14155b156121c25760405162461bcd60e51b81526004018080602001828103825260228152602001806129b46022913960400191505060405180910390fd5b600060018684878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561221e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612286576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b604080516020808201969096528082019490945260608401929092526080808401919091528151808403909101815260a09092019052805191012090565b6000806122da8484611e16565b156122e95750829050816122ef565b50819050825b9250929050565b604080516bffffffffffffffffffffffff19606094851b81166020808401919091529390941b90931660348401528051602881850301815260489093019052815191012090565b600062ffffff8216612396576040805162461bcd60e51b815260206004820152601a60248201527f5361666555696e7432343a206d6f64756c6f206279207a65726f000000000000604482015290519081900360640190fd5b8162ffffff168362ffffff16816123a957fe5b069392505050565b600081848411156124405760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124055781810151838201526020016123ed565b50505050905090810190601f1680156124325780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60606124578484600085612609565b949350505050565b6000806401000003d01980856401000003d01987880909600708905060006401000003d01984850991909114949350505050565b6000808262ffffff16116124ee576040805162461bcd60e51b815260206004820152601c60248201527f5361666555696e7432343a206469766973696f6e206279207a65726f00000000604482015290519081900360640190fd5b60008262ffffff168462ffffff168161250357fe5b04949350505050565b6000828260405160200180807f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250601a0183805190602001908083835b6020831061256a5780518252601f19909201916020918201910161254b565b51815160209384036101000a6000190180199092169116179052661213d4149b995d60ca1b919093019081528451600790910192850191508083835b602083106125c55780518252601f1990920191602091820191016125a6565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120905092915050565b60608247101561264a5760405162461bcd60e51b81526004018080602001828103825260268152602001806128e06026913960400191505060405180910390fd5b61265385612765565b6126a4576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106126e35780518252601f1990920191602091820191016126c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612745576040519150601f19603f3d011682016040523d82523d6000602084013e61274a565b606091505b509150915061275a82828661276b565b979650505050505050565b3b151590565b6060831561277a57508161081d565b82511561278a5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156124055781810151838201526020016123ed56fe6163636f756e744120616e64206163636f756e7442206d757374206e6f74206265207468652073616d6566756e646572206d75737420626520656974686572206163636f756e7441206f72206163636f756e74426368616e6e656c206d757374206265206f70656e206f722070656e64696e6720746f20636c6f73657075624b65795365636f6e6448616c66206d757374206e6f7420626520656d707479616d6f756e742073656e74206d75737420626520657175616c20746f20616d6f756e74207370656369666965647075626c6963206b657920646f6573206e6f74206d61746368206163636f756e7445434453413a20696e76616c6964207369676e6174757265202773272076616c7565416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c736563726574507265496d616765206d757374206265207468652068617368206f6620726563697069656e742773207365637265747573657244617461206d757374206d61746368206f6e65206f66206f757220737570706f727465642066756e6374696f6e73636f756e7465727061727479206d757374206e6f7420626520656d70747900006368616e6e656c206d75737420626520636c6f73656420696e206f7264657220746f206f70656e45434453413a20696e76616c6964207369676e6174757265202776272076616c75657369676e6572206d757374206d617463682074686520636f756e746572706172747970726f6f664f6652656c6179536563726574206d757374206e6f7420626520656d707479736563726574206d757374206e6f74206265207468652073616d65206173206265666f72657075624b6579466972737448616c66206d757374206e6f7420626520656d7074795361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646f70656e6572206d757374206265206163636f756e7441206f72206163636f756e7442696e69746961746f7220616e6420636f756e7465727061727479206d757374206e6f74206265207468652073616d656f70656e657220616e6420636f756e7465727061727479206d757374206e6f74206265207468652073616d65616d6f756e7441206f7220616d6f756e7442206d7573742062652067726561746572207468616e2030a2646970667358221220db176f5ef75fd94388977f6a1865301dd057bcac8e5d653589d20f499147f21b64736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101205760003560e01c80635e5c06e2116100ad578063ada8ee0d11610071578063ada8ee0d1461044f578063b4037e8014610457578063c8cb8df51461047d578063df0dd0d5146104d1578063fc0c546a1461050257610120565b80635e5c06e21461035b5780636c49a38e1461039a57806372581cc0146103d65780637a7ebd7b146103de5780637c2101ca1461043257610120565b8063249cb3fa116100f4578063249cb3fa14610283578063275621d1146102af5780632abb5e9d146102d05780633da79ce8146102f65780634341abdd1461031f57610120565b806223de2914610125578063048a097d1461020d578063075e389f1461022757806311428ad41461024d575b600080fd5b61020b600480360360c081101561013b57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b81111561017d57600080fd5b82018360208201111561018f57600080fd5b803590602001918460018302840111600160201b831117156101b057600080fd5b919390929091602081019035600160201b8111156101cd57600080fd5b8201836020820111156101df57600080fd5b803590602001918460018302840111600160201b8311171561020057600080fd5b509092509050610526565b005b610215610764565b60408051918252519081900360200190f35b61020b6004803603602081101561023d57600080fd5b50356001600160a01b031661076a565b61020b6004803603606081101561026357600080fd5b506001600160a01b03813581169160208101359091169060400135610784565b6102156004803603604081101561029957600080fd5b50803590602001356001600160a01b03166107af565b6102b7610824565b6040805163ffffffff9092168252519081900360200190f35b61020b600480360360208110156102e657600080fd5b50356001600160a01b0316610830565b61020b6004803603606081101561030c57600080fd5b508035906020810135906040013561083a565b61020b6004803603608081101561033557600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610846565b6103816004803603602081101561037157600080fd5b50356001600160a01b031661087c565b6040805192835260208301919091528051918290030190f35b61020b600480360360808110156103b057600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610895565b61021561094d565b6103fb600480360360208110156103f457600080fd5b5035610971565b60408051958652602086019490945263ffffffff9092168484015262ffffff16606084015215156080830152519081900360a00190f35b61020b6004803603602081101561044857600080fd5b50356109b1565b6102156109bb565b61020b6004803603602081101561046d57600080fd5b50356001600160a01b03166109c1565b61020b600480360361010081101561049457600080fd5b5080356001600160a01b03169060208101359060408101359060608101359060808101359060a08101359060c08101359060e0013560ff166109cb565b6104ee600480360360208110156104e757600080fd5b50356109dc565b604080519115158252519081900360200190f35b61050a6109f1565b604080516001600160a01b039092168252519081900360200190f35b6007546001600160a01b03163314610585576040805162461bcd60e51b815260206004820152601860248201527f63616c6c6572206d75737420626520486f7072546f6b656e0000000000000000604482015290519081900360640190fd5b6001600160a01b0388163014806105a357506001600160a01b038716155b156105ad5761075a565b6005548314806105be575060065483145b6105f95760405162461bcd60e51b815260040180806020018281038252603281526020018061293b6032913960400191505060405180910390fd5b6000806000806000600554898990501415610647578888606081101561061e57600080fd5b508035151595506001600160a01b036020820135811695506040909101351692508991506106cb565b888860a081101561065757600080fd5b508035151595506001600160a01b0360208201358116955060408201351693506060810135925060800135905061068e8282610a00565b8a146106cb5760405162461bcd60e51b815260040180806020018281038252602d815260200180612870602d913960400191505060405180910390fd5b6106d88c85858585610a5a565b841561075457836001600160a01b03168c6001600160a01b0316148061070f5750826001600160a01b03168c6001600160a01b0316145b61074a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806127fc602a913960400191505060405180910390fd5b6107548484610cb8565b50505050505b5050505050505050565b60065481565b600754610781906001600160a01b03163383610efb565b50565b60075461079c906001600160a01b0316333084611385565b6107aa338484846000610a5a565b505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166107de57600061081d565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b9392505050565b60025463ffffffff1681565b6107813382610cb8565b6107aa338383866113df565b61086933306108558585610a00565b6007546001600160a01b0316929190611385565b6108763385858585610a5a565b50505050565b6001602081905260009182526040909120805491015482565b336001600160a01b0385168114806108be5750836001600160a01b0316816001600160a01b0316145b6108f95760405162461bcd60e51b8152600401808060200182810382526023815260200180612a8c6023913960400191505060405180910390fd5b61090833306108558686610a00565b6000856001600160a01b0316826001600160a01b0316141561092b57508361092e565b50845b61093b8287878787610a5a565b6109458282610cb8565b505050505050565b7fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b81565b60036020526000908152604090208054600182015460029092015490919063ffffffff811690600160201b810462ffffff1690600160381b900460ff1685565b610781338261155e565b60055481565b610781338261165b565b61075a3389898989898989896118c7565b60046020526000908152604090205460ff1681565b6007546001600160a01b031681565b60008282018381101561081d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038516610ab5576040805162461bcd60e51b815260206004820152601860248201527f66756e646572206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b03161415610b065760405162461bcd60e51b815260040180806020018281038252602a8152602001806127d2602a913960400191505060405180910390fd5b6001600160a01b038416610b61576040805162461bcd60e51b815260206004820152601a60248201527f6163636f756e7441206d757374206e6f7420626520656d707479000000000000604482015290519081900360640190fd5b6001600160a01b038316610bbc576040805162461bcd60e51b815260206004820152601a60248201527f6163636f756e7442206d757374206e6f7420626520656d707479000000000000604482015290519081900360640190fd5b6000821180610bcb5750600081115b610c065760405162461bcd60e51b8152600401808060200182810382526029815260200180612b0a6029913960400191505060405180910390fd5b6000610c128585611dd4565b8054909450610c309350859250610c2a915086610a00565b90610a00565b8155610c3c8585611e16565b15610c56576001810154610c509084610a00565b60018201555b80546001820154604080516001600160a01b038a8116825260208201949094528082019290925251828716928816917f074d4367955152e97ae53474f3e30b8042462b3dd1169333c66a590386671fba919081900360600190a3505050505050565b806001600160a01b0316826001600160a01b03161415610d095760405162461bcd60e51b815260040180806020018281038252602c815260200180612ade602c913960400191505060405180910390fd5b6001600160a01b038216610d64576040805162461bcd60e51b815260206004820152601860248201527f6f70656e6572206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b6001600160a01b038116610dad576040805162461bcd60e51b815260206004820152601e602482015260008051602061296d833981519152604482015290519081900360640190fd5b6000610db98383611dd4565b93505050506000816000015411610e10576040805162461bcd60e51b815260206004820152601660248201527518da185b9b995b081b5d5cdd08189948199d5b99195960521b604482015290519081900360640190fd5b6002810154600090610e2d90600160201b900462ffffff16611e27565b90506000816002811115610e3d57fe5b14610e795760405162461bcd60e51b815260040180806020018281038252602781526020018061298d6027913960400191505060405180910390fd5b6002820154610e9590600160201b900462ffffff166001611e4f565b8260020160046101000a81548162ffffff021916908362ffffff160217905550826001600160a01b0316846001600160a01b03167fdd90f938230335e59dc925c57ecb0e27a28c2d87356e31f00cd5554abd6c1b2d60405160405180910390a350505050565b6001600160a01b038316610f56576040805162461bcd60e51b815260206004820152601760248201527f746f6b656e206d757374206e6f7420626520656d707479000000000000000000604482015290519081900360640190fd5b806001600160a01b0316826001600160a01b03161415610fa75760405162461bcd60e51b815260040180806020018281038252602f815260200180612aaf602f913960400191505060405180910390fd5b6001600160a01b038216611002576040805162461bcd60e51b815260206004820152601b60248201527f696e69746961746f72206d757374206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b6001600160a01b03811661104b576040805162461bcd60e51b815260206004820152601e602482015260008051602061296d833981519152604482015290519081900360640190fd5b600080600061105a8585611dd4565b93505092509250600061107f8260020160049054906101000a900462ffffff16611e27565b9050600281600281111561108f57fe5b146110e1576040805162461bcd60e51b815260206004820181905260248201527f6368616e6e656c206d7573742062652070656e64696e6720746f20636c6f7365604482015290519081900360640190fd5b6002820154600160381b900460ff16801561110d5750836001600160a01b0316866001600160a01b0316145b8061114057506002820154600160381b900460ff161580156111405750826001600160a01b0316866001600160a01b0316145b156111ae5761114d611eb1565b600283015463ffffffff9182169116106111ae576040805162461bcd60e51b815260206004820152601e60248201527f636c6f7375726554696d65206d757374206265206265666f7265206e6f770000604482015290519081900360640190fd5b600182015482546000906111c29083611ebb565b9050811561124e57886001600160a01b031663a9059cbb87846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561122157600080fd5b505af1158015611235573d6000803e3d6000fd5b505050506040513d602081101561124b57600080fd5b50505b80156112d857886001600160a01b031663a9059cbb86836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156112ab57600080fd5b505af11580156112bf573d6000803e3d6000fd5b505050506040513d60208110156112d557600080fd5b50505b60028401546112f490600160201b900462ffffff166008611e4f565b6002850180546000808855600188015567ff000000ffffffff1962ffffff93909316600160201b0266ffffff000000001990911617919091169055604080518381526020810183905281516001600160a01b03808b1693908c16927f8e096653b2e51f16fbc2f7c554ace94c1938ee5da0815dbcce55d3d03e319260929081900390910190a3505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610876908590611efd565b6001600160a01b03841661143a576040805162461bcd60e51b815260206004820152601960248201527f6163636f756e74206d757374206e6f7420626520656d70747900000000000000604482015290519081900360640190fd5b826114765760405162461bcd60e51b8152600401808060200182810382526021815260200180612a416021913960400191505060405180910390fd5b816114b25760405162461bcd60e51b815260040180806020018281038252602281526020018061284e6022913960400191505060405180910390fd5b836001600160a01b03166114c68484611fae565b6001600160a01b03161461150b5760405162461bcd60e51b815260040180806020018281038252602181526020018061289d6021913960400191505060405180910390fd5b611515848261155e565b604080518481526020810184905281516001600160a01b038716927f2b22861a1ef88f6a07c435dd5b2979a60ebb1c487b1f2e5498d78c07dcd787ef928290030190a250505050565b806115b0576040805162461bcd60e51b815260206004820152601860248201527f736563726574206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600090815260016020526040902080548214156116085760405162461bcd60e51b8152600401808060200182810382526025815260200180612a1c6025913960400191505060405180910390fd5b8181556001808201805490910190556040805183815290516001600160a01b038516917fde6c2e081309e5fa1ad76048c881e5c55a38b51661915a26b58ce40065fc66af919081900360200190a2505050565b806001600160a01b0316826001600160a01b031614156116ac5760405162461bcd60e51b815260040180806020018281038252602f815260200180612aaf602f913960400191505060405180910390fd5b6001600160a01b038216611707576040805162461bcd60e51b815260206004820152601b60248201527f696e69746961746f72206d757374206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b6001600160a01b038116611750576040805162461bcd60e51b815260206004820152601e602482015260008051602061296d833981519152604482015290519081900360640190fd5b600061175c8383611dd4565b9350505050600061177f8260020160049054906101000a900462ffffff16611e27565b9050600181600281111561178f57fe5b146117d8576040805162461bcd60e51b815260206004820152601460248201527331b430b73732b61036bab9ba1031329037b832b760611b604482015290519081900360640190fd5b60025463ffffffff166117e9611eb1565b60028401805463ffffffff19169190920163ffffffff908116919091179182905561182491600160201b900462ffffff1690600190611e4f16565b8260020160046101000a81548162ffffff021916908362ffffff16021790555060006118508585611e16565b905080156118725760028301805467ff000000000000001916600160381b1790555b60028301546040805163ffffffff9092168252516001600160a01b0380871692908816917fd69791bd3750bf9f659220208e4228b8170380f08ffbfc5b88b37c1d594bf9449181900360200190a35050505050565b6001600160a01b038916611922576040805162461bcd60e51b815260206004820152601b60248201527f726563697069656e74206d757374206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b6001600160a01b03881661196b576040805162461bcd60e51b815260206004820152601e602482015260008051602061296d833981519152604482015290519081900360640190fd5b866119bd576040805162461bcd60e51b815260206004820181905260248201527f736563726574507265496d616765206d757374206e6f7420626520656d707479604482015290519081900360640190fd5b856119f95760405162461bcd60e51b81526004018080602001828103825260248152602001806129f86024913960400191505060405180910390fd5b84611a4b576040805162461bcd60e51b815260206004820152601860248201527f616d6f756e74206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b82611a93576040805162461bcd60e51b815260206004820152601360248201527272206d757374206e6f7420626520656d70747960681b604482015290519081900360640190fd5b81611adb576040805162461bcd60e51b815260206004820152601360248201527273206d757374206e6f7420626520656d70747960681b604482015290519081900360640190fd5b60ff8116611b26576040805162461bcd60e51b815260206004820152601360248201527276206d757374206e6f7420626520656d70747960681b604482015290519081900360640190fd5b6001600160a01b03891660009081526001602090815260409182902082518083018b905283518082038401815290840190935282519290910191909120815414611ba15760405162461bcd60e51b81526004018080602001828103825260358152602001806129066035913960400191505060405180910390fd5b6000611bad8b8b611dd4565b935060009250611bbb915050565b6002820154611bd590600160201b900462ffffff16611e27565b6002811115611be057fe5b1415611c1d5760405162461bcd60e51b81526004018080602001828103825260288152602001806128266028913960400191505060405180910390fd5b6000611c54611c4f8d85600101548c611c488760020160049054906101000a900462ffffff16612041565b8d8d61206e565b6120e6565b60008181526004602052604090205490915060ff1615611cbb576040805162461bcd60e51b815260206004820152601d60248201527f7469636b6574206d757374206e6f742062652075736564207477696365000000604482015290519081900360640190fd5b8a6001600160a01b0316611cd18288888861210d565b6001600160a01b031614611d165760405162461bcd60e51b81526004018080602001828103825260228152602001806129d66022913960400191505060405180910390fd5b86611d23828c8c8461228f565b1115611d6d576040805162461bcd60e51b81526020600482015260146024820152733a34b1b5b2ba1036bab9ba1031329030903bb4b760611b604482015290519081900360640190fd5b8983556000818152600460205260409020805460ff19166001179055611d938c8c611e16565b15611db1576001820154611da79089610a00565b6001830155611dc6565b6001820154611dc09089611ebb565b60018301555b505050505050505050505050565b600080600080600080611de788886122cd565b915091506000611df783836122f6565b6000818152600360205260409020939a92995097509195509350505050565b6001600160a01b0390811691161090565b6000611e3962ffffff8316600a61233d565b62ffffff166002811115611e4957fe5b92915050565b600082820162ffffff808516908216101561081d576040805162461bcd60e51b815260206004820152601d60248201527f5361666555696e7432343a206164646974696f6e206f766572666c6f77000000604482015290519081900360640190fd5b63ffffffff421690565b600061081d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506123b1565b6060611f52826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124489092919063ffffffff16565b8051909150156107aa57808060200190516020811015611f7157600080fd5b50516107aa5760405162461bcd60e51b815260040180806020018281038252602a815260200180612a62602a913960400191505060405180910390fd5b6000611fba838361245f565b61200b576040805162461bcd60e51b815260206004820152601b60248201527f506f696e74206d757374206265206f6e207468652063757276652e0000000000604482015290519081900360640190fd5b5060408051602080820194909452808201929092528051808303820181526060909201905280519101206001600160a01b031690565b6000612063600161205862ffffff8516600a612493565b62ffffff1690611e4f565b62ffffff1692915050565b6040805160208082019690965281518082038701815281830183528051960195909520606097881b6bffffffffffffffffffffffff1916978601979097526074850196909652609484019490945260b483015260d482019290925260f480820192909252825180820390920182526101140190915290565b6000611e496040518060400160405280600381526020016231383760e81b8152508361250c565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561216e5760405162461bcd60e51b81526004018080602001828103825260228152602001806128be6022913960400191505060405180910390fd5b8160ff16601b1415801561218657508160ff16601c14155b156121c25760405162461bcd60e51b81526004018080602001828103825260228152602001806129b46022913960400191505060405180910390fd5b600060018684878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561221e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612286576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b604080516020808201969096528082019490945260608401929092526080808401919091528151808403909101815260a09092019052805191012090565b6000806122da8484611e16565b156122e95750829050816122ef565b50819050825b9250929050565b604080516bffffffffffffffffffffffff19606094851b81166020808401919091529390941b90931660348401528051602881850301815260489093019052815191012090565b600062ffffff8216612396576040805162461bcd60e51b815260206004820152601a60248201527f5361666555696e7432343a206d6f64756c6f206279207a65726f000000000000604482015290519081900360640190fd5b8162ffffff168362ffffff16816123a957fe5b069392505050565b600081848411156124405760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124055781810151838201526020016123ed565b50505050905090810190601f1680156124325780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60606124578484600085612609565b949350505050565b6000806401000003d01980856401000003d01987880909600708905060006401000003d01984850991909114949350505050565b6000808262ffffff16116124ee576040805162461bcd60e51b815260206004820152601c60248201527f5361666555696e7432343a206469766973696f6e206279207a65726f00000000604482015290519081900360640190fd5b60008262ffffff168462ffffff168161250357fe5b04949350505050565b6000828260405160200180807f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250601a0183805190602001908083835b6020831061256a5780518252601f19909201916020918201910161254b565b51815160209384036101000a6000190180199092169116179052661213d4149b995d60ca1b919093019081528451600790910192850191508083835b602083106125c55780518252601f1990920191602091820191016125a6565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120905092915050565b60608247101561264a5760405162461bcd60e51b81526004018080602001828103825260268152602001806128e06026913960400191505060405180910390fd5b61265385612765565b6126a4576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106126e35780518252601f1990920191602091820191016126c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612745576040519150601f19603f3d011682016040523d82523d6000602084013e61274a565b606091505b509150915061275a82828661276b565b979650505050505050565b3b151590565b6060831561277a57508161081d565b82511561278a5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156124055781810151838201526020016123ed56fe6163636f756e744120616e64206163636f756e7442206d757374206e6f74206265207468652073616d6566756e646572206d75737420626520656974686572206163636f756e7441206f72206163636f756e74426368616e6e656c206d757374206265206f70656e206f722070656e64696e6720746f20636c6f73657075624b65795365636f6e6448616c66206d757374206e6f7420626520656d707479616d6f756e742073656e74206d75737420626520657175616c20746f20616d6f756e74207370656369666965647075626c6963206b657920646f6573206e6f74206d61746368206163636f756e7445434453413a20696e76616c6964207369676e6174757265202773272076616c7565416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c736563726574507265496d616765206d757374206265207468652068617368206f6620726563697069656e742773207365637265747573657244617461206d757374206d61746368206f6e65206f66206f757220737570706f727465642066756e6374696f6e73636f756e7465727061727479206d757374206e6f7420626520656d70747900006368616e6e656c206d75737420626520636c6f73656420696e206f7264657220746f206f70656e45434453413a20696e76616c6964207369676e6174757265202776272076616c75657369676e6572206d757374206d617463682074686520636f756e746572706172747970726f6f664f6652656c6179536563726574206d757374206e6f7420626520656d707479736563726574206d757374206e6f74206265207468652073616d65206173206265666f72657075624b6579466972737448616c66206d757374206e6f7420626520656d7074795361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646f70656e6572206d757374206265206163636f756e7441206f72206163636f756e7442696e69746961746f7220616e6420636f756e7465727061727479206d757374206e6f74206265207468652073616d656f70656e657220616e6420636f756e7465727061727479206d757374206e6f74206265207468652073616d65616d6f756e7441206f7220616d6f756e7442206d7573742062652067726561746572207468616e2030a2646970667358221220db176f5ef75fd94388977f6a1865301dd057bcac8e5d653589d20f499147f21b64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_secsClosure": "seconds until a channel can be closed",
          "_token": "HoprToken address"
        }
      },
      "finalizeChannelClosure(address)": {
        "details": "Finalize channel closure, if cool-off period is over it will close the channel and transfer funds to the parties involved, then emits {ChannelClosed} event.",
        "params": {
          "counterparty": "the address of the counterparty"
        }
      },
      "fundAndOpenChannel(address,address,uint256,uint256)": {
        "details": "Fund channel and then open it, then emits {ChannelFunded} and {ChannelOpened} events.",
        "params": {
          "accountA": "the address of accountA",
          "accountB": "the address of accountB",
          "amountA": "amount to fund accountA",
          "amountB": "amount to fund accountB"
        }
      },
      "fundChannel(address,address,uint256)": {
        "details": "Funds a channel in one direction, then emits {ChannelFunded} event.",
        "params": {
          "account": "the address of the recipient",
          "amount": "amount to fund",
          "counterparty": "the address of the counterparty"
        }
      },
      "fundChannelMulti(address,address,uint256,uint256)": {
        "details": "Funds a channel, in both directions, then emits {ChannelFunded} event.",
        "params": {
          "accountA": "the address of accountA",
          "accountB": "the address of accountB",
          "amountA": "amount to fund accountA",
          "amountB": "amount to fund accountB"
        }
      },
      "initializeAccount(bytes32,uint256,uint256)": {
        "details": "Initializes an account, stores it's public key, secret and counter, then emits {AccountInitialized} and {AccountSecretUpdated} events.",
        "params": {
          "pubKeyFirstHalf": "first half of the public key",
          "pubKeySecondHalf": "second half of the public key",
          "secret": "account's secret"
        }
      },
      "initiateChannelClosure(address)": {
        "details": "Initialize channel closure, updates channel's closure time, when the cool-off period is over, user may finalize closure, then emits {ChannelPendingToClose} event.",
        "params": {
          "counterparty": "the address of the counterparty"
        }
      },
      "openChannel(address)": {
        "details": "Opens a channel, then emits {ChannelOpened} event.",
        "params": {
          "counterparty": "the address of the counterparty"
        }
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "params": {
          "amount": "uint256 amount of tokens to transfer",
          "from": "address token holder address",
          "operator": "address operator requesting the transfer",
          "operatorData": "bytes extra information provided by the operator (if any)",
          "to": "address recipient address",
          "userData": "bytes extra information provided by the token holder (if any)"
        }
      },
      "updateAccount(bytes32)": {
        "details": "Updates account's secret and counter, then emits {AccountSecretUpdated} event.",
        "params": {
          "secret": "account's secret"
        }
      }
    },
    "stateVariables": {
      "token": {
        "details": "HoprToken, the token that will be used to settle payments"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canImplementInterfaceForAddress(bytes32,address)": {
        "notice": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "notice": "A hook triggered when HOPR tokens are send to this contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 325,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3524,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "accounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Account)3519_storage)"
      },
      {
        "astId": 3684,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "secsClosure",
        "offset": 0,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 3689,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "channels",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Channel)3681_storage)"
      },
      {
        "astId": 4893,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "tickets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4406,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "FUND_CHANNEL_SIZE",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4429,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "FUND_CHANNEL_MULTI_SIZE",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4432,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "token",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)818"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)818": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Account)3519_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Accounts.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)3519_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Channel)3681_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Channels.Channel)",
        "numberOfBytes": "32",
        "value": "t_struct(Channel)3681_storage"
      },
      "t_struct(Account)3519_storage": {
        "encoding": "inplace",
        "label": "struct Accounts.Account",
        "members": [
          {
            "astId": 3516,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "secret",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3518,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "counter",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Channel)3681_storage": {
        "encoding": "inplace",
        "label": "struct Channels.Channel",
        "members": [
          {
            "astId": 3672,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3674,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "partyABalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3676,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "closureTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 3678,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "status",
            "offset": 4,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 3680,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "closureByPartyA",
            "offset": 7,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
